// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// paragraph2vec_train
Rcpp::List paragraph2vec_train(const char * trainFile, int size, int cbow, int hs, int negative, int iterations, int window, double alpha, double sample, int min_count, int threads, int trace);
RcppExport SEXP _doc2vec_paragraph2vec_train(SEXP trainFileSEXP, SEXP sizeSEXP, SEXP cbowSEXP, SEXP hsSEXP, SEXP negativeSEXP, SEXP iterationsSEXP, SEXP windowSEXP, SEXP alphaSEXP, SEXP sampleSEXP, SEXP min_countSEXP, SEXP threadsSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type trainFile(trainFileSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< int >::type cbow(cbowSEXP);
    Rcpp::traits::input_parameter< int >::type hs(hsSEXP);
    Rcpp::traits::input_parameter< int >::type negative(negativeSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type window(windowSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type sample(sampleSEXP);
    Rcpp::traits::input_parameter< int >::type min_count(min_countSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< int >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(paragraph2vec_train(trainFile, size, cbow, hs, negative, iterations, window, alpha, sample, min_count, threads, trace));
    return rcpp_result_gen;
END_RCPP
}
// paragraph2vec_save_model
void paragraph2vec_save_model(SEXP ptr, std::string file);
RcppExport SEXP _doc2vec_paragraph2vec_save_model(SEXP ptrSEXP, SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    paragraph2vec_save_model(ptr, file);
    return R_NilValue;
END_RCPP
}
// paragraph2vec_load_model
Rcpp::List paragraph2vec_load_model(std::string file);
RcppExport SEXP _doc2vec_paragraph2vec_load_model(SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    rcpp_result_gen = Rcpp::wrap(paragraph2vec_load_model(file));
    return rcpp_result_gen;
END_RCPP
}
// paragraph2vec_dictionary
std::vector<std::string> paragraph2vec_dictionary(SEXP ptr, std::string type);
RcppExport SEXP _doc2vec_paragraph2vec_dictionary(SEXP ptrSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(paragraph2vec_dictionary(ptr, type));
    return rcpp_result_gen;
END_RCPP
}
// paragraph2vec_nearest
Rcpp::DataFrame paragraph2vec_nearest(SEXP ptr, std::string x, int top_n, std::string type);
RcppExport SEXP _doc2vec_paragraph2vec_nearest(SEXP ptrSEXP, SEXP xSEXP, SEXP top_nSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< std::string >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type top_n(top_nSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(paragraph2vec_nearest(ptr, x, top_n, type));
    return rcpp_result_gen;
END_RCPP
}
// paragraph2vec_nearest_sentence
Rcpp::List paragraph2vec_nearest_sentence(SEXP ptr, Rcpp::List x, int top_n);
RcppExport SEXP _doc2vec_paragraph2vec_nearest_sentence(SEXP ptrSEXP, SEXP xSEXP, SEXP top_nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type top_n(top_nSEXP);
    rcpp_result_gen = Rcpp::wrap(paragraph2vec_nearest_sentence(ptr, x, top_n));
    return rcpp_result_gen;
END_RCPP
}
// paragraph2vec_embedding
Rcpp::NumericMatrix paragraph2vec_embedding(SEXP ptr, std::string type, bool normalize);
RcppExport SEXP _doc2vec_paragraph2vec_embedding(SEXP ptrSEXP, SEXP typeSEXP, SEXP normalizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< bool >::type normalize(normalizeSEXP);
    rcpp_result_gen = Rcpp::wrap(paragraph2vec_embedding(ptr, type, normalize));
    return rcpp_result_gen;
END_RCPP
}
// paragraph2vec_infer
Rcpp::NumericMatrix paragraph2vec_infer(SEXP ptr, Rcpp::List x);
RcppExport SEXP _doc2vec_paragraph2vec_infer(SEXP ptrSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(paragraph2vec_infer(ptr, x));
    return rcpp_result_gen;
END_RCPP
}
// paragraph2vec_embedding_subset
Rcpp::NumericMatrix paragraph2vec_embedding_subset(SEXP ptr, Rcpp::CharacterVector x, std::string type, bool normalize);
RcppExport SEXP _doc2vec_paragraph2vec_embedding_subset(SEXP ptrSEXP, SEXP xSEXP, SEXP typeSEXP, SEXP normalizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< bool >::type normalize(normalizeSEXP);
    rcpp_result_gen = Rcpp::wrap(paragraph2vec_embedding_subset(ptr, x, type, normalize));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_doc2vec_paragraph2vec_train", (DL_FUNC) &_doc2vec_paragraph2vec_train, 12},
    {"_doc2vec_paragraph2vec_save_model", (DL_FUNC) &_doc2vec_paragraph2vec_save_model, 2},
    {"_doc2vec_paragraph2vec_load_model", (DL_FUNC) &_doc2vec_paragraph2vec_load_model, 1},
    {"_doc2vec_paragraph2vec_dictionary", (DL_FUNC) &_doc2vec_paragraph2vec_dictionary, 2},
    {"_doc2vec_paragraph2vec_nearest", (DL_FUNC) &_doc2vec_paragraph2vec_nearest, 4},
    {"_doc2vec_paragraph2vec_nearest_sentence", (DL_FUNC) &_doc2vec_paragraph2vec_nearest_sentence, 3},
    {"_doc2vec_paragraph2vec_embedding", (DL_FUNC) &_doc2vec_paragraph2vec_embedding, 3},
    {"_doc2vec_paragraph2vec_infer", (DL_FUNC) &_doc2vec_paragraph2vec_infer, 2},
    {"_doc2vec_paragraph2vec_embedding_subset", (DL_FUNC) &_doc2vec_paragraph2vec_embedding_subset, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_doc2vec(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
